//
// Created by paren on 22/05/2025.
//

#pragma once

#include <string>
#include <vector>
#include <chrono>



/**
 * @class Process
 * @brief Represents a simulated process with logging and line-tracking features.
 */
class Process {
public:
    /**
     * @brief Constructs a Process object.
     * @param id The unique identifier for the process.
     * @param name The name of the process.
     */
    Process(int id, std::string  name);

    /**
     * @brief Gets the ID of the process.
     * @return Process ID.
     */
    int getID() const;

    /**
     * @brief Gets the name of the process.
     * @return Process name.
     */
    std::string getName() const;

    /**
     * @brief Gets the log entries of the process.
     * @return A vector of log strings.
     */
    std::vector<std::string> getLogs() const;

    /**
     * @brief Gets the current line the process is executing.
     * @return Current line number.
     */
    int getCurrentLine() const;

    /**
     * @brief Gets the total number of lines the process will execute.
     * @return Total lines.
     */
    int getTotalLines() const;

    /**
     * @brief Gets the timestamp when the process was created.
     * @return A string containing the formatted timestamp.
     */
    std::string& getTimestamp();

    /**
     * @brief Adds a log entry to the process.
     * @param entry The log entry to add.
     */
    void log(const std::string& entry);

    /**
     * @brief Increments the current line number by 1, up to the total number of lines.
     */
    void incrementLine();

    /// @brief Writes the log output to a file in the logs folder.
    ///        Each line includes a timestamp and CPU core ID.
    void writeLogToFile() const;


private:
    int processID;                       ///< Unique identifier for the process.
    std::string processName;            ///< Name of the process.
    std::vector<std::string> logs;      ///< Log entries generated by the process.
    int currentLine;                    ///< Current line number being executed.
    int totalLines;                     ///< Total lines of code the process will execute.
    std::string timestamp;              ///< Timestamp when the process was created.

    /**
     * @brief Generates a formatted timestamp for the process creation time.
     * @return A string with the current local date and time.
     */
    std::string generateTimestamp() const;
};
